@page "/"
@using BlazorOllamaGlobal.Client.Components
@using BlazorOllamaGlobal.Client.Models.Tiles
@using BlazorOllamaGlobal.Client.Services
@inject TileService TileService


<div class="tile-manager-container">
    @foreach (var tile in TileService.ActiveTiles)
    {
        <TileContainer IsExiting="@tile.IsExiting" OnExitCompleted="@(() => OnTileExitCompleted(tile))">
            @tile.Content
        </TileContainer>
    }
</div>

@code {
    
    // This variable will hold content for a new tile until the old one is gone.
    private ITileModel pendingTile;

    protected override void OnInitialized()
    {
        // Subscribe to tile requests from the TileService.
        TileService.OnTileRequested += OnTileRequested;
    }

    private void OnTileRequested(ITileModel tileModel)
    {
        if (TileService.ActiveTiles.Any())
        {
            // Instead of removing immediately, mark the current tile for exit.
            TileService.ActiveTiles.First().IsExiting = true;
            // Save the new tile's content for later.
            pendingTile = tileModel;
            StateHasChanged();
        }
        else
        {
            // No tile exists, so add the new one immediately.
            AddTile(tileModel);
        }
    }

    private void OnTileExitCompleted(ITileModel tile)
    {
        // Remove the tile once its exit animation completes.
        TileService.ActiveTiles.Remove(tile);
        StateHasChanged();

        // If we have pending content, add a new tile.
        if (pendingTile != null)
        {
            AddTile(pendingTile);
            pendingTile = null;
            StateHasChanged();
        }
    }

    private void AddTile(ITileModel tile)
    {
        TileService.ActiveTiles.Add(tile);
        StateHasChanged();
    }
}